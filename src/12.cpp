/** @file 12.cpp Problem 12: Highly divisible triangular number
 *
 * The sequence of triangle numbers is generated by adding the natural numbers.
 * So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The
 * first ten terms would be:
 *
 *      1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
 *
 * Let us list the factors of the first seven triangle numbers:
 *
 *       1: 1
 *       3: 1,3
 *       6: 1,2,3,6
 *      10: 1,2,5,10
 *      15: 1,3,5,15
 *      21: 1,3,7,21
 *      28: 1,2,4,7,14,28
 *
 * We can see that 28 is the first triangle number to have over five divisors.
 *
 * What is the value of the first triangle number to have over five hundred divisors?
 */

#include "factoring.hpp"    // prime_factor, pair_vector

/// @cond
#include <cassert>          // assert
#include <cstdint>          // uint64_t
#include <iostream>         // cout
/// @endcond

using std::uint64_t;

uint64_t count_factors(uint64_t n)
{
    factoring::pair_vector cs;
    factoring::prime_factor(&cs, n);
    uint64_t r = 1;
    for (auto const& c : cs)  // Each prime factor may appear from
        r *= c.second + 1;    // 0 to c.second times in each divisor.
    return r;
}

/** Returns the least triangular integer having more than `n` divisors,
 * including itself and 1.
 */
uint64_t first(uint64_t n)
{
    uint64_t r = 0;
    for (uint64_t i = 1; count_factors(r += i) <= n; ++i) { }
    return r;
}

int main()
{
    assert(first(5) == 28);
    std::cout << first(500) << std::endl;
}
